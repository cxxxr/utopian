#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

(defpackage utopian/roswell/utopian.ros
  (:use :cl))
(in-package :utopian/roswell/utopian.ros)

(ql:quickload '(:utopian :split-sequence) :silent t)

(defmacro case-equal (keyform &body cases)
  (let ((g-keyform (gensym "KEYFORM")))
    `(let ((,g-keyform ,keyform))
       (cond
         ,@(loop for (case . body) in cases
                 if (eq case 'otherwise)
                   collect `(t ,@body)
                 else
                   collect `((find ,g-keyform ',(if (listp case)
                                                    case
                                                    (list case))
                                   :test #'equal)
                             ,@body))))))

(defun print-usage ()
  (format *error-output* "~&Usage: utopian command [option...]

Commands:
  new APP_PATH [option...]
  generate controller NAME [action...]
  generate model NAME [column_name:data_type...]
"))

(defun command-new (path &rest options)
  (let ((args
          (loop for option = (pop options)
                while option
                append (case-equal option
                         ("--author"
                          (list :author (pop options)))
                         ("--description"
                          (list :description (pop options)))
                         ("--license"
                          (list :license (pop options)))
                         (otherwise (error "Unknown option ~A" option)))))
        (path
          (uiop:ensure-directory-pathname path)))
    (apply #'utopian:make-project path args)

    (format t "~&$ qlot install~%")
    (uiop:run-program (format nil "cd '~A' && qlot install" path)
                      :output *standard-output*
                      :error-output *error-output*)

    (format t "~&$ npm install~%")
    (ros:exec `("npm" "-prefix" ,(namestring path) "install" ,(namestring path)))))

(defun project-name ()
  (let ((asd-files
          (uiop:directory-files (uiop:getcwd) "*.asd")))
    (first
     (sort
      (mapcar #'pathname-name asd-files)
      #'string<))))

(defun render (path env)
  (emb:execute-emb (asdf:system-relative-pathname :utopian path)
                   :env env))

(defun log-writing (path)
  (format *error-output* "~&writing ~A~%" path))

(defun command-generate-model (name &rest columns)
  (let ((appname (project-name)))
    (unless appname
      (error "No ASD files found"))
    (let ((destination (pathname (format nil "models/~A.lisp" name))))
      (log-writing destination)
      (with-open-file (out destination :direction :output
                                       :if-exists :supersede
                                       :if-does-not-exist :create)
        (princ
         (render #P"skeleton/model.lisp"
                 (list :name name
                       :appname appname
                       :columns
                       (mapcar (lambda (column)
                                 (destructuring-bind (name &rest type)
                                     (split-sequence:split-sequence #\: column)
                                   (list* name type)))
                               columns)))
         out)))))

(defun command-generate-controller (name &rest actions)
  (let ((appname (project-name)))
    (unless appname
      (error "No ASD files found"))
    (let ((destination (pathname (format nil "controllers/~A.lisp" name))))
      (log-writing destination)
      (if (probe-file destination)
          (with-open-file (out destination :direction :output
                                           :if-exists :append)
            (format out
                    "~{~%~A~}"
                    (mapcar (lambda (action)
                              (render #P"skeleton/controller/action.lisp"
                                      (list :name action
                                            :controller-name name)))
                            actions)))
          (with-open-file (out destination :direction :output
                                           :if-does-not-exist :create)
            (princ
             (render #P"skeleton/controller.lisp"
                     (list :name name
                           :appname appname
                           :actions
                           (mapcar (lambda (action)
                                     (list :name action
                                           :controller-name name))
                                   actions)))
             out))))
    (let ((routes (pathname (format nil "config/routes.lisp"))))
      (with-open-file (out routes :direction :output
                           :if-exists :append)
        (dolist (action actions)
          (format out
                  "~&(route :GET \"/~A/~A\" \"~A:~A\")~%"
                  name action name action))))
    (ensure-directories-exist (pathname (format nil "views/~A/" name)))
    (dolist (action actions)
      (let ((destination (pathname (format nil "views/~A/~A.html.dj" name action))))
        (log-writing destination)
        (with-open-file (out destination :direction :output
                                         :if-exists :supersede
                                         :if-does-not-exist :create)
          (princ
           (render #P"skeleton/view.html.dj"
                   (list :appname appname
                         :name name
                         :action action))
           out)))
      (let ((destination (pathname (format nil "assets/stylesheets/~A.scss" name))))
        (ensure-directories-exist destination)
        (log-writing destination)
        (with-open-file (out destination :direction :output
                                         :if-exists :supersede
                                         :if-does-not-exist :create)
          (princ
           (render #P"skeleton/asset.scss"
                   (list :name name))
           out)))
      (with-open-file (out (pathname "assets/stylesheets/main.scss")
                           :direction :output
                           :if-exists :append)
        (format out "~&@import \"~A.scss\";~%" name)))))

(defun command-generate (type &rest options)
  (case-equal type
    ("model" (apply #'command-generate-model options))
    ("controller" (apply #'command-generate-controller options))
    (otherwise (print-usage))))

(defun main (&optional command &rest argv)
  (cond
    ((equal command "new")
     (unless (first argv)
       (print-usage)
       (uiop:quit -1))
     (apply #'command-new argv))
    ((and (equal command "generate")
          (first argv))
     (apply #'command-generate argv))
    (t (print-usage))))
