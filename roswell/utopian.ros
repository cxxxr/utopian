#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  (ql:quickload '#:utopian/errors :silent t))

(defpackage #:ros.script.utopian.3758684578
  (:use #:cl)
  (:import-from #:utopian/errors
                #:invalid-arguments
                #:unknown-command
                #:simple-task-error))
(in-package #:ros.script.utopian.3758684578)

(defun print-usage ()
  (format *error-output*
          "~&Usage: ~A COMMAND [ARGS..]

COMMANDS:
    new [destination]
        Generate a project skeleton at the 'destination'.

    server [app.lisp]
        Start a development web server.

    db
        Operation for databases.

    generate
        Generate files.
"
          (file-namestring *load-pathname*)))

(defun main (&optional $1 &rest argv)
  (handler-case
      (cond
        ((equal $1 "new")
         (ql:quickload '#:utopian/cli/new :silent t)
         (uiop:symbol-call :utopian/cli/new :main (first argv)))
        ((equal $1 "server")
         (ql:quickload '#:utopian/cli/server :silent t)
         (uiop:symbol-call :utopian/cli/server :main (first argv)))
        ((equal $1 "db")
         (ql:quickload '#:utopian/cli/db :silent t)
         (uiop:symbol-call :utopian/cli/db :main (first argv)))
        ((equal $1 "generate")
         (ql:quickload '#:utopian/cli/generate :silent t)
         (apply #'uiop:symbol-call :utopian/cli/generate :main argv))
        (t
         (print-usage)
         (uiop:quit -1)))
    (invalid-arguments () (uiop:quit -1))
    (unknown-command (e)
      (format *error-output* "~&~A~%" e)
      (uiop:quit -1))
    (simple-task-error (e)
      (format *error-output* "~&~A~%" e)
      (uiop:quit -1))))
;;; vim: set ft=lisp lisp:
